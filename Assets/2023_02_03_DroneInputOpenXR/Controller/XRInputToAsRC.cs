//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/2023_02_03_DroneInputOpenXR/Controller/XRInputToAsRC.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRInputToAsRC : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInputToAsRC()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputToAsRC"",
    ""maps"": [
        {
            ""name"": ""LeftControllerXR"",
            ""id"": ""2daacb8d-b27f-4b4f-ad8b-b28f77099894"",
            ""actions"": [
                {
                    ""name"": ""LeftRightRotation"",
                    ""type"": ""Value"",
                    ""id"": ""daf58cc1-5202-45f1-912c-afd1dbeaf976"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownUp"",
                    ""type"": ""Value"",
                    ""id"": ""4b44789e-cc87-426f-9def-d010eb183c23"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d34e753-a5de-4d6a-9105-e3a3be82a3c2"",
                    ""path"": ""<WMRSpatialController>{LeftHand}/joystick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c72b993-1cda-4018-8371-045c008df70e"",
                    ""path"": ""<WMRSpatialController>{LeftHand}/touchpad/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c40a9a0-d1fa-4aa4-8e0b-54c1001b0824"",
                    ""path"": ""<WMRSpatialController>{LeftHand}/touchpad/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9e0e3b6-2451-4372-b826-271589362ba1"",
                    ""path"": ""<WMRSpatialController>{LeftHand}/joystick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightControllerXR"",
            ""id"": ""38420e7a-e693-40df-8ed9-07bffdde1fd2"",
            ""actions"": [
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""c45c0b91-a8c3-4e83-afc1-0baae4fe2544"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BackFront"",
                    ""type"": ""Value"",
                    ""id"": ""aeed2837-7ec7-46cd-864b-f46023448388"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97d52f61-3bd5-4e4a-875f-989a1492755c"",
                    ""path"": ""<WMRSpatialController>{RightHand}/touchpad/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81dad4a5-7388-4b7f-a924-1f0a6e67aa3c"",
                    ""path"": ""<WMRSpatialController>{RightHand}/joystick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90590ced-916c-49a1-acce-35c8a46a8f60"",
                    ""path"": ""<WMRSpatialController>{RightHand}/touchpad/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe4da159-fd11-4793-a809-a430ded2603e"",
                    ""path"": ""<WMRSpatialController>{RightHand}/joystick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftControllerXR
        m_LeftControllerXR = asset.FindActionMap("LeftControllerXR", throwIfNotFound: true);
        m_LeftControllerXR_LeftRightRotation = m_LeftControllerXR.FindAction("LeftRightRotation", throwIfNotFound: true);
        m_LeftControllerXR_DownUp = m_LeftControllerXR.FindAction("DownUp", throwIfNotFound: true);
        // RightControllerXR
        m_RightControllerXR = asset.FindActionMap("RightControllerXR", throwIfNotFound: true);
        m_RightControllerXR_LeftRight = m_RightControllerXR.FindAction("LeftRight", throwIfNotFound: true);
        m_RightControllerXR_BackFront = m_RightControllerXR.FindAction("BackFront", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftControllerXR
    private readonly InputActionMap m_LeftControllerXR;
    private ILeftControllerXRActions m_LeftControllerXRActionsCallbackInterface;
    private readonly InputAction m_LeftControllerXR_LeftRightRotation;
    private readonly InputAction m_LeftControllerXR_DownUp;
    public struct LeftControllerXRActions
    {
        private @XRInputToAsRC m_Wrapper;
        public LeftControllerXRActions(@XRInputToAsRC wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRightRotation => m_Wrapper.m_LeftControllerXR_LeftRightRotation;
        public InputAction @DownUp => m_Wrapper.m_LeftControllerXR_DownUp;
        public InputActionMap Get() { return m_Wrapper.m_LeftControllerXR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftControllerXRActions set) { return set.Get(); }
        public void SetCallbacks(ILeftControllerXRActions instance)
        {
            if (m_Wrapper.m_LeftControllerXRActionsCallbackInterface != null)
            {
                @LeftRightRotation.started -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnLeftRightRotation;
                @LeftRightRotation.performed -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnLeftRightRotation;
                @LeftRightRotation.canceled -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnLeftRightRotation;
                @DownUp.started -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnDownUp;
                @DownUp.performed -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnDownUp;
                @DownUp.canceled -= m_Wrapper.m_LeftControllerXRActionsCallbackInterface.OnDownUp;
            }
            m_Wrapper.m_LeftControllerXRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftRightRotation.started += instance.OnLeftRightRotation;
                @LeftRightRotation.performed += instance.OnLeftRightRotation;
                @LeftRightRotation.canceled += instance.OnLeftRightRotation;
                @DownUp.started += instance.OnDownUp;
                @DownUp.performed += instance.OnDownUp;
                @DownUp.canceled += instance.OnDownUp;
            }
        }
    }
    public LeftControllerXRActions @LeftControllerXR => new LeftControllerXRActions(this);

    // RightControllerXR
    private readonly InputActionMap m_RightControllerXR;
    private IRightControllerXRActions m_RightControllerXRActionsCallbackInterface;
    private readonly InputAction m_RightControllerXR_LeftRight;
    private readonly InputAction m_RightControllerXR_BackFront;
    public struct RightControllerXRActions
    {
        private @XRInputToAsRC m_Wrapper;
        public RightControllerXRActions(@XRInputToAsRC wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRight => m_Wrapper.m_RightControllerXR_LeftRight;
        public InputAction @BackFront => m_Wrapper.m_RightControllerXR_BackFront;
        public InputActionMap Get() { return m_Wrapper.m_RightControllerXR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightControllerXRActions set) { return set.Get(); }
        public void SetCallbacks(IRightControllerXRActions instance)
        {
            if (m_Wrapper.m_RightControllerXRActionsCallbackInterface != null)
            {
                @LeftRight.started -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnLeftRight;
                @LeftRight.performed -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnLeftRight;
                @LeftRight.canceled -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnLeftRight;
                @BackFront.started -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnBackFront;
                @BackFront.performed -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnBackFront;
                @BackFront.canceled -= m_Wrapper.m_RightControllerXRActionsCallbackInterface.OnBackFront;
            }
            m_Wrapper.m_RightControllerXRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftRight.started += instance.OnLeftRight;
                @LeftRight.performed += instance.OnLeftRight;
                @LeftRight.canceled += instance.OnLeftRight;
                @BackFront.started += instance.OnBackFront;
                @BackFront.performed += instance.OnBackFront;
                @BackFront.canceled += instance.OnBackFront;
            }
        }
    }
    public RightControllerXRActions @RightControllerXR => new RightControllerXRActions(this);
    public interface ILeftControllerXRActions
    {
        void OnLeftRightRotation(InputAction.CallbackContext context);
        void OnDownUp(InputAction.CallbackContext context);
    }
    public interface IRightControllerXRActions
    {
        void OnLeftRight(InputAction.CallbackContext context);
        void OnBackFront(InputAction.CallbackContext context);
    }
}
